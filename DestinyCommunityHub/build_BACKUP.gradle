buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://download.crashlytics.com/maven' }

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.8.+'
        classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.+'
    }
}

apply plugin: 'android'
apply plugin: 'crashlytics'

repositories {
    maven { url 'http://download.crashlytics.com/maven' }

}


configurations {
    apt
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')

    apt 'com.squareup.dagger:dagger-compiler:1.1.+'
    compile 'com.squareup.dagger:dagger:1.1.+'

    compile 'com.squareup:otto:1.3.4'
    compile 'com.squareup.picasso:picasso:2.1.1'
    compile 'com.etsy.android.grid:library:1.0.3'
    compile 'com.squareup.okhttp:okhttp:1.3.0'
    compile 'com.squareup.retrofit:retrofit:1.3.0'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'com.jakewharton.timber:timber:2.1.0'
    compile 'com.github.chrisbanes.actionbarpulltorefresh:library:+'
    compile project(':libraries:slidinguppanel_library')
    compile 'com.crashlytics.android:crashlytics:1.+'

}

android {
    compileSdkVersion 19
    buildToolsVersion '19.0.1'
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 19
        versionCode 1
        versionName '1.0'
        packageName "com.opencabinetlabs.destinycommunityhub"

    }
    // fix for problems
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }

    signingConfigs {
        myConfig {
            storeFile file('/Users/John/Documents/Releases/destinykeystore')
            storePassword System.console().readLine("\n\$ Enter keystore password: ")
            keyAlias System.console().readLine("\n\$ Enter key alias: ")
            keyPassword System.console().readLine("\n\$ Enter key password: ")
        }
    }


    buildTypes {
        debug {
            packageNameSuffix '.debug'
            runProguard false
            // zipAlign false // this is default for debug
        }
        release {
            signingConfig signingConfigs.myConfig

            runProguard true
            proguardFile 'proguard-rules.txt'
            proguardFile getDefaultProguardFile('proguard-android.txt')
            zipAlign true // this is default for release

            // testPackageName 'com.test.gradletest.tests'
            // testInstrumentationRunner 'android.test.InstrumentationTestRunner' // this is the default
        }
    }

    // Move the build types to build-types/<type>
    // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
    // This moves them out of them default location under src/<type>/... which would
    // conflict with src/ being used by the main source set.
    // Adding new build types or product flavors should be accompanied
    // by a similar customization.
    //debug.setRoot('build-types/debug')
    //release.setRoot('build-types/release')
}

def getSourceSetName(variant) {
    return new File(variant.dirName).getName();
}

android.applicationVariants.all { variant ->
    def aptOutputDir = project.file("build/source/apt")
    def aptOutput = new File(aptOutputDir, variant.dirName)
    println "****************************"
    println "variant: ${variant.name}"
    println "manifest:  ${variant.processResources.manifestFile}"
    println "aptOutput:  ${aptOutput}"
    println "****************************"

    android.sourceSets[getSourceSetName(variant)].java.srcDirs += aptOutput.getPath()

    variant.javaCompile.options.compilerArgs += [
            '-processorpath', configurations.apt.getAsPath(),
            '-AandroidManifestFile=' + variant.processResources.manifestFile,
            '-s', aptOutput
    ]

    variant.javaCompile.source = variant.javaCompile.source.filter { p ->
        return !p.getPath().startsWith(aptOutputDir.getPath())
    }

    variant.javaCompile.doFirst {
        aptOutput.mkdirs()
    }
}


